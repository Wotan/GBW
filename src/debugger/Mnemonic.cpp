#include <iostream>
#include "Debugger.hpp"

typedef struct s_mnemonic
{
  const char *desc;
  const char *mnemonic;
  const int  size;
} Mnemonic;


Mnemonic MnemonicsTab[] =
{
  {"No Operation", "NOP", 1},
  {"Load 16-bit immediate into BC", "LD BC,nn", 1},
  {"Save A to address pointed by BC", "LD (BC),A", 1},
  {"Increment 16-bit BC", "INC BC", 1},
  {"Increment B", "INC B", 1},
  {"Decrement B", "DEC B", 1},
  {"Load 8-bit immediate into B", "LD B,n", 2},
  {"Rotate A left with carry", "RLC A", 1},
  {"Save SP to given address", "LD (nn),SP", 3},
  {"Add 16-bit BC to HL", "ADD HL,BC", 1},
  {"Load A from address pointed to by BC", "LD A,(BC)", 1},
  {"Decrement 16-bit BC", "DEC BC", 1},
  {"Increment C", "INC C", 1},
  {"Decrement C", "DEC C", 1},
  {"Load 8-bit immediate into C", "LD C,n", 2},
  {"Rotate A right with carry", "RRC A", 1},
  {"Stop processor", "STOP", 1},
  {"Load 16-bit immediate into DE", "LD DE,nn", 3},
  {"Save A to address pointed by DE", "LD (DE),A", 1},
  {"Increment 16-bit DE", "INC DE", 1},
  {"Increment D", "INC D", 1},
  {"Decrement D", "DEC D", 1},
  {"Load 8-bit immediate into D", "LD D,n", 2},
  {"Rotate A left", "RL A", 1},
  {"Relative jump by signed immediate", "JR n", 2},
  {"Add 16-bit DE to HL", "ADD HL,DE", 1},
  {"Load A from address pointed to by DE", "LD A,(DE)", 1},
  {"Decrement 16-bit DE", "DEC DE", 1},
  {"Increment E", "INC E", 1},
  {"Decrement E", "DEC E", 1},
  {"Load 8-bit immediate into E", "LD E,n", 2},
  {"Rotate A right", "RR A", 1},
  {"Relative jump by signed immediate if last result was not zero", "JR NZ,n", 2},
  {"Load 16-bit immediate into HL", "LD HL,nn", 3},
  {"Save A to address pointed by HL, and increment HL", "LDI (HL),A", 1},
  {"Increment 16-bit HL", "INC HL", 1},
  {"Increment H", "INC H", 1},
  {"Decrement H", "DEC H", 1},
  {"Load 8-bit immediate into H", "LD H,n", 2},
  {"Adjust A for BCD addition", "DAA", 1},
  {"Relative jump by signed immediate if last result was zero", "JR Z,n", 2},
  {"Add 16-bit HL to HL", "ADD HL,HL", 1},
  {"Load A from address pointed to by HL, and increment HL", "LDI A,(HL)", 1},
  {"Decrement 16-bit HL", "DEC HL", 1},
  {"Increment L", "INC L", 1},
  {"Decrement L", "DEC L", 1},
  {"Load 8-bit immediate into L", "LD L,n", 2},
  {"Complement (logical NOT) on A", "CPL", 1},
  {"Relative jump by signed immediate if last result caused no carry", "JR NC,n", 2},
  {"Load 16-bit immediate into SP", "LD SP,nn", 3},
  {"Save A to address pointed by HL, and decrement HL", "LDD (HL),A", 1},
  {"Increment 16-bit HL", "INC SP", 1},
  {"Increment value pointed by HL", "INC (HL)", 1},
  {"Decrement value pointed by HL", "DEC (HL)", 1},
  {"Load 8-bit immediate into address pointed by HL", "LD (HL),n", 2},
  {"Set carry flag", "SCF", 1},
  {"Relative jump by signed immediate if last result caused carry", "JR C,n", 2},
  {"Add 16-bit SP to HL", "ADD HL,SP", 1},
  {"Load A from address pointed to by HL, and decrement HL", "LDD A,(HL)", 1},
  {"Decrement 16-bit SP", "DEC SP", 1},
  {"Increment A", "INC A", 1},
  {"Decrement A", "DEC A", 1},
  {"Load 8-bit immediate into A", "LD A,n", 2},
  {"Clear carry flag", "CCF", 1},
  {"Copy B to B", "LD B,B", 1},
  {"Copy C to B", "LD B,C", 1},
  {"Copy D to B", "LD B,D", 1},
  {"Copy E to B", "LD B,E", 1},
  {"Copy H to B", "LD B,H", 1},
  {"Copy L to B", "LD B,L", 1},
  {"Copy value pointed by HL to B", "LD B,(HL)", 1},
  {"Copy A to B", "LD B,A", 1},
  {"Copy B to C", "LD C,B", 1},
  {"Copy C to C", "LD C,C", 1},
  {"Copy D to C", "LD C,D", 1},
  {"Copy E to C", "LD C,E", 1},
  {"Copy H to C", "LD C,H", 1},
  {"Copy L to C", "LD C,L", 1},
  {"Copy value pointed by HL to C", "LD C,(HL)", 1},
  {"Copy A to C", "LD C,A", 1},
  {"Copy B to D", "LD D,B", 1},
  {"Copy C to D", "LD D,C", 1},
  {"Copy D to D", "LD D,D", 1},
  {"Copy E to D", "LD D,E", 1},
  {"Copy H to D", "LD D,H", 1},
  {"Copy L to D", "LD D,L", 1},
  {"Copy value pointed by HL to D", "LD D,(HL)", 1},
  {"Copy A to D", "LD D,A", 1},
  {"Copy B to E", "LD E,B", 1},
  {"Copy C to E", "LD E,C", 1},
  {"Copy D to E", "LD E,D", 1},
  {"Copy E to E", "LD E,E", 1},
  {"Copy H to E", "LD E,H", 1},
  {"Copy L to E", "LD E,L", 1},
  {"Copy value pointed by HL to E", "LD E,(HL)", 1},
  {"Copy A to E", "LD E,A", 1},
  {"Copy B to H", "LD H,B", 1},
  {"Copy C to H", "LD H,C", 1},
  {"Copy D to H", "LD H,D", 1},
  {"Copy E to H", "LD H,E", 1},
  {"Copy H to H", "LD H,H", 1},
  {"Copy L to H", "LD H,L", 1},
  {"Copy value pointed by HL to H", "LD H,(HL)", 1},
  {"Copy A to H", "LD H,A", 1},
  {"Copy B to L", "LD L,B", 1},
  {"Copy C to L", "LD L,C", 1},
  {"Copy D to L", "LD L,D", 1},
  {"Copy E to L", "LD L,E", 1},
  {"Copy H to L", "LD L,H", 1},
  {"Copy L to L", "LD L,L", 1},
  {"Copy value pointed by HL to L", "LD L,(HL)", 1},
  {"Copy A to L", "LD L,A", 1},
  {"Copy B to address pointed by HL", "LD (HL),B", 1},
  {"Copy C to address pointed by HL", "LD (HL),C", 1},
  {"Copy D to address pointed by HL", "LD (HL),D", 1},
  {"Copy E to address pointed by HL", "LD (HL),E", 1},
  {"Copy H to address pointed by HL", "LD (HL),H", 1},
  {"Copy L to address pointed by HL", "LD (HL),L", 1},
  {"Halt processor", "HALT", 1},
  {"Copy A to address pointed by HL", "LD (HL),A", 1},
  {"Copy B to A", "LD A,B", 1},
  {"Copy C to A", "LD A,C", 1},
  {"Copy D to A", "LD A,D", 1},
  {"Copy E to A", "LD A,E", 1},
  {"Copy H to A", "LD A,H", 1},
  {"Copy L to A", "LD A,L", 1},
  {"Copy value pointed by HL to A", "LD A,(HL)", 1},
  {"Copy A to A", "LD A,A", 1},
  {"Add B to A", "ADD A,B", 1},
  {"Add C to A", "ADD A,C", 1},
  {"Add D to A", "ADD A,D", 1},
  {"Add E to A", "ADD A,E", 1},
  {"Add H to A", "ADD A,H", 1},
  {"Add L to A", "ADD A,L", 1},
  {"Add value pointed by HL to A", "ADD A,(HL)", 1},
  {"Add A to A", "ADD A,A", 1},
  {"Add B and carry flag to A", "ADC A,B", 1},
  {"Add C and carry flag to A", "ADC A,C", 1},
  {"Add D and carry flag to A", "ADC A,D", 1},
  {"Add E and carry flag to A", "ADC A,E", 1},
  {"Add H and carry flag to A", "ADC A,H", 1},
  {"Add and carry flag L to A", "ADC A,L", 1},
  {"Add value pointed by HL and carry flag to A", "ADC A,(HL)", 1},
  {"Add A and carry flag to A", "ADC A,A", 1},
  {"Subtract B from A", "SUB A,B", 1},
  {"Subtract C from A", "SUB A,C", 1},
  {"Subtract D from A", "SUB A,D", 1},
  {"Subtract E from A", "SUB A,E", 1},
  {"Subtract H from A", "SUB A,H", 1},
  {"Subtract L from A", "SUB A,L", 1},
  {"Subtract value pointed by HL from A", "SUB A,(HL)", 1},
  {"Subtract A from A", "SUB A,A", 1},
  {"Subtract B and carry flag from A", "SBC A,B", 1},
  {"Subtract C and carry flag from A", "SBC A,C", 1},
  {"Subtract D and carry flag from A", "SBC A,D", 1},
  {"Subtract E and carry flag from A", "SBC A,E", 1},
  {"Subtract H and carry flag from A", "SBC A,H", 1},
  {"Subtract and carry flag L from A", "SBC A,L", 1},
  {"Subtract value pointed by HL and carry flag from A", "SBC A,(HL)", 1},
  {"Subtract A and carry flag from A", "SBC A,A", 1},
  {"Logical AND B against A", "AND B", 1},
  {"Logical AND C against A", "AND C", 1},
  {"Logical AND D against A", "AND D", 1},
  {"Logical AND E against A", "AND E", 1},
  {"Logical AND H against A", "AND H", 1},
  {"Logical AND L against A", "AND L", 1},
  {"Logical AND value pointed by HL against A", "AND (HL)", 1},
  {"Logical AND A against A", "AND A", 1},
  {"Logical XOR B against A", "XOR B", 1},
  {"Logical XOR C against A", "XOR C", 1},
  {"Logical XOR D against A", "XOR D", 1},
  {"Logical XOR E against A", "XOR E", 1},
  {"Logical XOR H against A", "XOR H", 1},
  {"Logical XOR L against A", "XOR L", 1},
  {"Logical XOR value pointed by HL against A", "XOR (HL)", 1},
  {"Logical XOR A against A", "XOR A", 1},
  {"Logical OR B against A", "OR B", 1},
  {"Logical OR C against A", "OR C", 1},
  {"Logical OR D against A", "OR D", 1},
  {"Logical OR E against A", "OR E", 1},
  {"Logical OR H against A", "OR H", 1},
  {"Logical OR L against A", "OR L", 1},
  {"Logical OR value pointed by HL against A", "OR (HL)", 1},
  {"Logical OR A against A", "OR A", 1},
  {"Compare B against A", "CP B", 1},
  {"Compare C against A", "CP C", 1},
  {"Compare D against A", "CP D", 1},
  {"Compare E against A", "CP E", 1},
  {"Compare H against A", "CP H", 1},
  {"Compare L against A", "CP L", 1},
  {"Compare value pointed by HL against A", "CP (HL)", 1},
  {"Compare A against A", "CP A", 1},
  {"Return if last result was not zero", "RET NZ", 1},
  {"Pop 16-bit value from stack into BC", "POP BC", 1},
  {"Absolute jump to 16-bit location if last result was not zero", "JP NZ,nn", 3},
  {"Absolute jump to 16-bit location", "JP nn", 3},
  {"Call routine at 16-bit location if last result was not zero", "CALL NZ,nn", 3},
  {"Push 16-bit BC onto stack", "PUSH BC", 1},
  {"Add 8-bit immediate to A", "ADD A,n", 2},
  {"Call routine at address 0000h", "RST 0", 1},
  {"Return if last result was zero", "RET Z", 1},
  {"Return to calling routine", "RET", 1},
  {"Absolute jump to 16-bit location if last result was zero", "JP Z,nn", 3},
  {"Extended operations (two-byte instruction code)", "Ext ops", 1},
  {"Call routine at 16-bit location if last result was zero", "CALL Z,nn", 3},
  {"Call routine at 16-bit location", "CALL nn", 3},
  {"Add 8-bit immediate and carry to A", "ADC A,n", 2},
  {"Call routine at address 0008h", "RST 8", 1},
  {"Return if last result caused no carry", "RET NC", 1},
  {"Pop 16-bit value from stack into DE", "POP DE", 1},
  {"Absolute jump to 16-bit location if last result caused no carry", "JP NC,nn", 3},
  {"Operation removed in this CPU", "XX", 1},
  {"Call routine at 16-bit location if last result caused no carry", "CALL NC,nn", 3},
  {"Push 16-bit DE onto stack", "PUSH DE", 1},
  {"Subtract 8-bit immediate from A", "SUB A,n", 2},
  {"Call routine at address 0010h", "RST 10", 1},
  {"Return if last result caused carry", "RET C", 1},
  {"Enable interrupts and return to calling routine", "RETI", 1},
  {"Absolute jump to 16-bit location if last result caused carry", "JP C,nn", 3},
  {"Operation removed in this CPU", "XX", 1},
  {"Call routine at 16-bit location if last result caused carry", "CALL C,nn", 3},
  {"Operation removed in this CPU", "XX", 1},
  {"Subtract 8-bit immediate and carry from A", "SBC A,n", 2},
  {"Call routine at address 0018h", "RST 18", 1},
  {"Save A at address pointed to by (FF00h + 8-bit immediate)", "LDH (n),A", 2},
  {"Pop 16-bit value from stack into HL", "POP HL", 1},
  {"Save A at address pointed to by (FF00h + C)", "LDH (C),A", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Push 16-bit HL onto stack", "PUSH HL", 1},
  {"Logical AND 8-bit immediate against A", "AND n", 2},
  {"Call routine at address 0020h", "RST 20", 1},
  {"Add signed 8-bit immediate to SP", "ADD SP,d", 1},
  {"Jump to 16-bit value pointed by HL", "JP (HL)", 1},
  {"Save A at given 16-bit address", "LD (nn),A", 3},
  {"Operation removed in this CPU", "XX", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Logical XOR 8-bit immediate against A", "XOR n", 2},
  {"Call routine at address 0028h", "RST 28", 1},
  {"Load A from address pointed to by (FF00h + 8-bit immediate)", "LDH A,(n)", 2},
  {"Pop 16-bit value from stack into AF", "POP AF", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"DIsable interrupts", "DI", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Push 16-bit AF onto stack", "PUSH AF", 1},
  {"Logical OR 8-bit immediate against A", "OR n", 2},
  {"Call routine at address 0030h", "RST 30", 1},
  {"Add signed 8-bit immediate to SP and save result in HL", "LDHL SP,d", 2},
  {"Copy HL to SP", "LD SP,HL", 1},
  {"Load A from given 16-bit address", "LD A,(nn)", 3},
  {"Enable interrupts", "EI", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Operation removed in this CPU", "XX", 1},
  {"Compare 8-bit immediate against A", "CP n", 2},
  {"Call routine at address 0038h", "RST 38", 1}
};

Mnemonic extendMnemonics[] =
  {
    {"Rotate B left with carry", "RLC B", 1},
    {"Rotate C left with carry", "RLC C", 1},
    {"Rotate D left with carry", "RLC D", 1},
    {"Rotate E left with carry", "RLC E", 1},
    {"Rotate H left with carry", "RLC H", 1},
    {"Rotate L left with carry", "RLC L", 1},
    {"Rotate value pointed by HL left with carry", "RLC (HL)", 1},
    {"Rotate A left with carry", "RLC A", 1},
    {"Rotate B right with carry", "RRC B", 1},
    {"Rotate C right with carry", "RRC C", 1},
    {"Rotate D right with carry", "RRC D", 1},
    {"Rotate E right with carry", "RRC E", 1},
    {"Rotate H right with carry", "RRC H", 1},
    {"Rotate L right with carry", "RRC L", 1},
    {"Rotate value pointed by HL right with carry", "RRC (HL)", 1},
    {"Rotate A right with carry", "RRC A", 1},
    {"Rotate B left", "RL B", 1},
    {"Rotate C left", "RL C", 1},
    {"Rotate D left", "RL D", 1},
    {"Rotate E left", "RL E", 1},
    {"Rotate H left", "RL H", 1},
    {"Rotate L left", "RL L", 1},
    {"Rotate value pointed by HL left", "RL (HL)", 1},
    {"Rotate A left", "RL A", 1},
    {"Rotate B right", "RR B", 1},
    {"Rotate C right", "RR C", 1},
    {"Rotate D right", "RR D", 1},
    {"Rotate E right", "RR E", 1},
    {"Rotate H right", "RR H", 1},
    {"Rotate L right", "RR L", 1},
    {"Rotate value pointed by HL right", "RR (HL)", 1},
    {"Rotate A right", "RR A", 1},
    {"Shift B left preserving sign", "SLA B", 1},
    {"Shift C left preserving sign", "SLA C", 1},
    {"Shift D left preserving sign", "SLA D", 1},
    {"Shift E left preserving sign", "SLA E", 1},
    {"Shift H left preserving sign", "SLA H", 1},
    {"Shift L left preserving sign", "SLA L", 1},
    {"Shift value pointed by HL left preserving sign", "SLA (HL)", 1},
    {"Shift A left preserving sign", "SLA A", 1},
    {"Shift B right preserving sign", "SRA B", 1},
    {"Shift C right preserving sign", "SRA C", 1},
    {"Shift D right preserving sign", "SRA D", 1},
    {"Shift E right preserving sign", "SRA E", 1},
    {"Shift H right preserving sign", "SRA H", 1},
    {"Shift L right preserving sign", "SRA L", 1},
    {"Shift value pointed by HL right preserving sign", "SRA (HL)", 1},
    {"Shift A right preserving sign", "SRA A", 1},
    {"Swap nybbles in B", "SWAP B", 1},
    {"Swap nybbles in C", "SWAP C", 1},
    {"Swap nybbles in D", "SWAP D", 1},
    {"Swap nybbles in E", "SWAP E", 1},
    {"Swap nybbles in H", "SWAP H", 1},
    {"Swap nybbles in L", "SWAP L", 1},
    {"Swap nybbles in value pointed by HL", "SWAP (HL)", 1},
    {"Swap nybbles in A", "SWAP A", 1},
    {"Shift B right", "SRL B", 1},
    {"Shift C right", "SRL C", 1},
    {"Shift D right", "SRL D", 1},
    {"Shift E right", "SRL E", 1},
    {"Shift H right", "SRL H", 1},
    {"Shift L right", "SRL L", 1},
    {"Shift value pointed by HL right", "SRL (HL)", 1},
    {"Shift A right", "SRL A", 1},
    {"Test bit 0 of B", "BIT 0,B", 1},
    {"Test bit 0 of C", "BIT 0,C", 1},
    {"Test bit 0 of D", "BIT 0,D", 1},
    {"Test bit 0 of E", "BIT 0,E", 1},
    {"Test bit 0 of H", "BIT 0,H", 1},
    {"Test bit 0 of L", "BIT 0,L", 1},
    {"Test bit 0 of value pointed by HL", "BIT 0,(HL)", 1},
    {"Test bit 0 of A", "BIT 0,A", 1},
    {"Test bit 1 of B", "BIT 1,B", 1},
    {"Test bit 1 of C", "BIT 1,C", 1},
    {"Test bit 1 of D", "BIT 1,D", 1},
    {"Test bit 1 of E", "BIT 1,E", 1},
    {"Test bit 1 of H", "BIT 1,H", 1},
    {"Test bit 1 of L", "BIT 1,L", 1},
    {"Test bit 1 of value pointed by HL", "BIT 1,(HL)", 1},
    {"Test bit 1 of A", "BIT 1,A", 1},
    {"Test bit 2 of B", "BIT 2,B", 1},
    {"Test bit 2 of C", "BIT 2,C", 1},
    {"Test bit 2 of D", "BIT 2,D", 1},
    {"Test bit 2 of E", "BIT 2,E", 1},
    {"Test bit 2 of H", "BIT 2,H", 1},
    {"Test bit 2 of L", "BIT 2,L", 1},
    {"Test bit 2 of value pointed by HL", "BIT 2,(HL)", 1},
    {"Test bit 2 of A", "BIT 2,A", 1},
    {"Test bit 3 of B", "BIT 3,B", 1},
    {"Test bit 3 of C", "BIT 3,C", 1},
    {"Test bit 3 of D", "BIT 3,D", 1},
    {"Test bit 3 of E", "BIT 3,E", 1},
    {"Test bit 3 of H", "BIT 3,H", 1},
    {"Test bit 3 of L", "BIT 3,L", 1},
    {"Test bit 3 of value pointed by HL", "BIT 3,(HL)", 1},
    {"Test bit 3 of A", "BIT 3,A", 1},
    {"Test bit 4 of B", "BIT 4,B", 1},
    {"Test bit 4 of C", "BIT 4,C", 1},
    {"Test bit 4 of D", "BIT 4,D", 1},
    {"Test bit 4 of E", "BIT 4,E", 1},
    {"Test bit 4 of H", "BIT 4,H", 1},
    {"Test bit 4 of L", "BIT 4,L", 1},
    {"Test bit 4 of value pointed by HL", "BIT 4,(HL)", 1},
    {"Test bit 4 of A", "BIT 4,A", 1},
    {"Test bit 5 of B", "BIT 5,B", 1},
    {"Test bit 5 of C", "BIT 5,C", 1},
    {"Test bit 5 of D", "BIT 5,D", 1},
    {"Test bit 5 of E", "BIT 5,E", 1},
    {"Test bit 5 of H", "BIT 5,H", 1},
    {"Test bit 5 of L", "BIT 5,L", 1},
    {"Test bit 5 of value pointed by HL", "BIT 5,(HL)", 1},
    {"Test bit 5 of A", "BIT 5,A", 1},
    {"Test bit 6 of B", "BIT 6,B", 1},
    {"Test bit 6 of C", "BIT 6,C", 1},
    {"Test bit 6 of D", "BIT 6,D", 1},
    {"Test bit 6 of E", "BIT 6,E", 1},
    {"Test bit 6 of H", "BIT 6,H", 1},
    {"Test bit 6 of L", "BIT 6,L", 1},
    {"Test bit 6 of value pointed by HL", "BIT 6,(HL)", 1},
    {"Test bit 6 of A", "BIT 6,A", 1},
    {"Test bit 7 of B", "BIT 7,B", 1},
    {"Test bit 7 of C", "BIT 7,C", 1},
    {"Test bit 7 of D", "BIT 7,D", 1},
    {"Test bit 7 of E", "BIT 7,E", 1},
    {"Test bit 7 of H", "BIT 7,H", 1},
    {"Test bit 7 of L", "BIT 7,L", 1},
    {"Test bit 7 of value pointed by HL", "BIT 7,(HL)", 1},
    {"Test bit 7 of A", "BIT 7,A", 1},
    {"Clear (reset) bit 0 of B", "RES 0,B", 1},
    {"Clear (reset) bit 0 of C", "RES 0,C", 1},
    {"Clear (reset) bit 0 of D", "RES 0,D", 1},
    {"Clear (reset) bit 0 of E", "RES 0,E", 1},
    {"Clear (reset) bit 0 of H", "RES 0,H", 1},
    {"Clear (reset) bit 0 of L", "RES 0,L", 1},
    {"Clear (reset) bit 0 of value pointed by HL", "RES 0,(HL)", 1},
    {"Clear (reset) bit 0 of A", "RES 0,A", 1},
    {"Clear (reset) bit 1 of B", "RES 1,B", 1},
    {"Clear (reset) bit 1 of C", "RES 1,C", 1},
    {"Clear (reset) bit 1 of D", "RES 1,D", 1},
    {"Clear (reset) bit 1 of E", "RES 1,E", 1},
    {"Clear (reset) bit 1 of H", "RES 1,H", 1},
    {"Clear (reset) bit 1 of L", "RES 1,L", 1},
    {"Clear (reset) bit 1 of value pointed by HL", "RES 1,(HL)", 1},
    {"Clear (reset) bit 1 of A", "RES 1,A", 1},
    {"Clear (reset) bit 2 of B", "RES 2,B", 1},
    {"Clear (reset) bit 2 of C", "RES 2,C", 1},
    {"Clear (reset) bit 2 of D", "RES 2,D", 1},
    {"Clear (reset) bit 2 of E", "RES 2,E", 1},
    {"Clear (reset) bit 2 of H", "RES 2,H", 1},
    {"Clear (reset) bit 2 of L", "RES 2,L", 1},
    {"Clear (reset) bit 2 of value pointed by HL", "RES 2,(HL)", 1},
    {"Clear (reset) bit 2 of A", "RES 2,A", 1},
    {"Clear (reset) bit 3 of B", "RES 3,B", 1},
    {"Clear (reset) bit 3 of C", "RES 3,C", 1},
    {"Clear (reset) bit 3 of D", "RES 3,D", 1},
    {"Clear (reset) bit 3 of E", "RES 3,E", 1},
    {"Clear (reset) bit 3 of H", "RES 3,H", 1},
    {"Clear (reset) bit 3 of L", "RES 3,L", 1},
    {"Clear (reset) bit 3 of value pointed by HL", "RES 3,(HL)", 1},
    {"Clear (reset) bit 3 of A", "RES 3,A", 1},
    {"Clear (reset) bit 4 of B", "RES 4,B", 1},
    {"Clear (reset) bit 4 of C", "RES 4,C", 1},
    {"Clear (reset) bit 4 of D", "RES 4,D", 1},
    {"Clear (reset) bit 4 of E", "RES 4,E", 1},
    {"Clear (reset) bit 4 of H", "RES 4,H", 1},
    {"Clear (reset) bit 4 of L", "RES 4,L", 1},
    {"Clear (reset) bit 4 of value pointed by HL", "RES 4,(HL)", 1},
    {"Clear (reset) bit 4 of A", "RES 4,A", 1},
    {"Clear (reset) bit 5 of B", "RES 5,B", 1},
    {"Clear (reset) bit 5 of C", "RES 5,C", 1},
    {"Clear (reset) bit 5 of D", "RES 5,D", 1},
    {"Clear (reset) bit 5 of E", "RES 5,E", 1},
    {"Clear (reset) bit 5 of H", "RES 5,H", 1},
    {"Clear (reset) bit 5 of L", "RES 5,L", 1},
    {"Clear (reset) bit 5 of value pointed by HL", "RES 5,(HL)", 1},
    {"Clear (reset) bit 5 of A", "RES 5,A", 1},
    {"Clear (reset) bit 6 of B", "RES 6,B", 1},
    {"Clear (reset) bit 6 of C", "RES 6,C", 1},
    {"Clear (reset) bit 6 of D", "RES 6,D", 1},
    {"Clear (reset) bit 6 of E", "RES 6,E", 1},
    {"Clear (reset) bit 6 of H", "RES 6,H", 1},
    {"Clear (reset) bit 6 of L", "RES 6,L", 1},
    {"Clear (reset) bit 6 of value pointed by HL", "RES 6,(HL)", 1},
    {"Clear (reset) bit 6 of A", "RES 6,A", 1},
    {"Clear (reset) bit 7 of B", "RES 7,B", 1},
    {"Clear (reset) bit 7 of C", "RES 7,C", 1},
    {"Clear (reset) bit 7 of D", "RES 7,D", 1},
    {"Clear (reset) bit 7 of E", "RES 7,E", 1},
    {"Clear (reset) bit 7 of H", "RES 7,H", 1},
    {"Clear (reset) bit 7 of L", "RES 7,L", 1},
    {"Clear (reset) bit 7 of value pointed by HL", "RES 7,(HL)", 1},
    {"Clear (reset) bit 7 of A", "RES 7,A", 1},
    {"Set bit 0 of B", "SET 0,B", 1},
    {"Set bit 0 of C", "SET 0,C", 1},
    {"Set bit 0 of D", "SET 0,D", 1},
    {"Set bit 0 of E", "SET 0,E", 1},
    {"Set bit 0 of H", "SET 0,H", 1},
    {"Set bit 0 of L", "SET 0,L", 1},
    {"Set bit 0 of value pointed by HL", "SET 0,(HL)", 1},
    {"Set bit 0 of A", "SET 0,A", 1},
    {"Set bit 1 of B", "SET 1,B", 1},
    {"Set bit 1 of C", "SET 1,C", 1},
    {"Set bit 1 of D", "SET 1,D", 1},
    {"Set bit 1 of E", "SET 1,E", 1},
    {"Set bit 1 of H", "SET 1,H", 1},
    {"Set bit 1 of L", "SET 1,L", 1},
    {"Set bit 1 of value pointed by HL", "SET 1,(HL)", 1},
    {"Set bit 1 of A", "SET 1,A", 1},
    {"Set bit 2 of B", "SET 2,B", 1},
    {"Set bit 2 of C", "SET 2,C", 1},
    {"Set bit 2 of D", "SET 2,D", 1},
    {"Set bit 2 of E", "SET 2,E", 1},
    {"Set bit 2 of H", "SET 2,H", 1},
    {"Set bit 2 of L", "SET 2,L", 1},
    {"Set bit 2 of value pointed by HL", "SET 2,(HL)", 1},
    {"Set bit 2 of A", "SET 2,A", 1},
    {"Set bit 3 of B", "SET 3,B", 1},
    {"Set bit 3 of C", "SET 3,C", 1},
    {"Set bit 3 of D", "SET 3,D", 1},
    {"Set bit 3 of E", "SET 3,E", 1},
    {"Set bit 3 of H", "SET 3,H", 1},
    {"Set bit 3 of L", "SET 3,L", 1},
    {"Set bit 3 of value pointed by HL", "SET 3,(HL)", 1},
    {"Set bit 3 of A", "SET 3,A", 1},
    {"Set bit 4 of B", "SET 4,B", 1},
    {"Set bit 4 of C", "SET 4,C", 1},
    {"Set bit 4 of D", "SET 4,D", 1},
    {"Set bit 4 of E", "SET 4,E", 1},
    {"Set bit 4 of H", "SET 4,H", 1},
    {"Set bit 4 of L", "SET 4,L", 1},
    {"Set bit 4 of value pointed by HL", "SET 4,(HL)", 1},
    {"Set bit 4 of A", "SET 4,A", 1},
    {"Set bit 5 of B", "SET 5,B", 1},
    {"Set bit 5 of C", "SET 5,C", 1},
    {"Set bit 5 of D", "SET 5,D", 1},
    {"Set bit 5 of E", "SET 5,E", 1},
    {"Set bit 5 of H", "SET 5,H", 1},
    {"Set bit 5 of L", "SET 5,L", 1},
    {"Set bit 5 of value pointed by HL", "SET 5,(HL)", 1},
    {"Set bit 5 of A", "SET 5,A", 1},
    {"Set bit 6 of B", "SET 6,B", 1},
    {"Set bit 6 of C", "SET 6,C", 1},
    {"Set bit 6 of D", "SET 6,D", 1},
    {"Set bit 6 of E", "SET 6,E", 1},
    {"Set bit 6 of H", "SET 6,H", 1},
    {"Set bit 6 of L", "SET 6,L", 1},
    {"Set bit 6 of value pointed by HL", "SET 6,(HL)", 1},
    {"Set bit 6 of A", "SET 6,A", 1},
    {"Set bit 7 of B", "SET 7,B", 1},
    {"Set bit 7 of C", "SET 7,C", 1},
    {"Set bit 7 of D", "SET 7,D", 1},
    {"Set bit 7 of E", "SET 7,E", 1},
    {"Set bit 7 of H", "SET 7,H", 1},
    {"Set bit 7 of L", "SET 7,L", 1},
    {"Set bit 7 of value pointed by HL", "SET 7,(HL)", 1},
    {"Set bit 7 of A", "SET 7,A", 1}
  };

const char *Debugger::GetOpMnemonic(Emulator *emu, int addr)
{
  BYTE	value;

  value = emu->ReadMem(addr);
  if (value != 0xCB)
    return MnemonicsTab[value].mnemonic;
  else
    {
      value = emu->ReadMem(addr + 1);
      return extendMnemonics[value].mnemonic;
    }
  return 0;
}

const char *Debugger::GetOpDesc(Emulator *emu, int addr)
{
  BYTE	value;

  value = emu->ReadMem(addr);
  if (value != 0xCB)
    return MnemonicsTab[value].desc;
  else
    {
      value = emu->ReadMem(addr + 1);
      return extendMnemonics[value].desc;
    }
  return 0;
}

int Debugger::GetOpSize(Emulator *emu, int addr)
{
  BYTE	value;

  value = emu->ReadMem(addr);
  if (value != 0xCB)
    return MnemonicsTab[value].size;
  else
    return 2;
  return 0;
}
